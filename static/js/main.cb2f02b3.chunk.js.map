{"version":3,"sources":["components/Card.js","components/search.js","components/scroll.js","components/errorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","Search","search","type","onChange","placeholder","Scroll","props","children","ErrorBoundry","state","hasErorr","error","info","this","setState","Component","App","onsearchChange","e","searchfield","target","value","robots","console","log","fetch","then","response","json","users","card","filter","robot","toLowerCase","includes","map","key","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+MAceA,EAZD,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAEpB,OACI,yBAAKC,UAAU,6DACX,yBAAKC,IAAG,+BAA0BF,KAClC,6BACI,gCAAMF,GACN,+BAAKC,MCCVI,EARA,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACT,OACI,6BACG,2BAAOC,KAAK,SAAUC,SAAUF,EAAOG,YAAY,gBAAgBN,UAAU,uCCK7EO,MARf,SAAgBC,GACZ,OACI,yBAAKR,UAAU,UACVQ,EAAMC,WCqBJC,E,kDAvBV,WAAYF,GAAO,IAAD,8BACd,cAAMA,IACDG,MAAM,CACPC,UAAS,GAHC,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CACVJ,UAAS,M,+BAId,OAAGG,KAAKJ,MAAMC,SACH,kDAGP,6BACKG,KAAKP,MAAMC,c,GAlBAQ,aCmDbC,E,kDA/Cb,aAAc,IAAD,8BACX,gBAYFC,eAAe,SAACC,GACd,EAAKJ,SAAS,CACZK,YAAYD,EAAEE,OAAOC,SAbvB,EAAKZ,MAAM,CACTa,OAAO,GACPH,YAAY,IAJH,E,gEAOO,IAAD,OACjBI,QAAQC,IAAI,MACZC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAQ,EAAKf,SAAS,CAACQ,OAAOO,S,+BAQ7B,IAAD,OAIHC,EAHgBjB,KAAKJ,MAAMa,OAAOS,QAAO,SAAAC,GAC1C,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKzB,MAAMU,YAAYc,kBAE7CE,KAAI,SAAAH,GAAK,OAAG,kBAAC,EAAD,CAAMI,IAAKJ,EAAMnC,GAAGA,GAAImC,EAAMnC,GAAIF,KAAMqC,EAAMrC,KAAMC,MAAOoC,EAAMpC,WACrG,OAAgC,IAA5BiB,KAAKJ,MAAMa,OAAOe,OAEnB,uCAIA,yBAAKvC,UAAU,OACf,8CACA,kBAAC,EAAD,CAAQG,OAAQY,KAAKI,iBACrB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGa,S,GApCUf,aCOCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLY,QAAQZ,MAAMA,EAAM2C,a","file":"static/js/main.cb2f02b3.chunk.js","sourcesContent":["import React from 'react'\n\n const  Card =({name ,email,id})=>{\n \n        return (\n            <div className=\" card tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={`https://robohash.org/${id}`}/>\n                <div>\n                    <h3> {name}</h3>\n                    <p> {email}</p>\n                </div>\n            </div>\n        )\n    }\nexport default Card\n","import React from 'react'\n\n  const Search=({search})=> {\n        return (\n            <div>\n               <input type=\"search\"  onChange={search}placeholder=\"Search robots\" className=\"pa3 ba b--green bg-lightest-blue\"/> \n            </div>\n        )\n    \n}\nexport default Search\n","import React from 'react'\n\nfunction Scroll(props) {\n    return (\n        <div className=\"scroll\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\n\n class ErrorBoundry extends Component {\n     constructor(props){\n         super(props)\n         this.state={\n             hasErorr:false\n         }\n     }\n     componentDidCatch(error,info){\n         this.setState({\n             hasErorr:true\n         })\n     }\n    render() {\n        if(this.state.hasErorr){\n            return <h1>oooh it's not good</h1>\n        }\n        return (\n            <div>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default ErrorBoundry\n","import React,{Component} from 'react';\nimport Card from './components/Card'\nimport Search from './components/search'\nimport Scroll from'./components/scroll'\nimport ErrorBoundry from './components/errorBoundry'\nclass  App extends Component {\n  constructor(){\n    super()\n    this.state={\n      robots:[],\n      searchfield:''\n    }\n  }\n  componentDidMount(){\n    console.log('ok')\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users=>{this.setState({robots:users}) })\n  }\n  onsearchChange=(e)=>{\n    this.setState({\n      searchfield:e.target.value\n    })\n  \n  }\n  render(){\n    const filterRobot= this.state.robots.filter(robot=>{\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n const card= filterRobot.map(robot=> <Card key={robot.id}id={robot.id} name={robot.name} email={robot.email}/>)\n if (this.state.robots.length ===0) {\n   return (\n    <h1>LOADING</h1>\n   )\n }else{\n  return(\n    <div className=\" tc\">\n    <h1>robots friends</h1>\n    <Search search={this.onsearchChange} />\n    <Scroll>\n      <ErrorBoundry>\n        {card}\n      </ErrorBoundry>\n    </Scroll>\n    </div>\n  )\n }\n \n  \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}